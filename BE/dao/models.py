import json
import uuid

from django.core.serializers.json import DjangoJSONEncoder
from django.db import models
from django.forms.models import model_to_dict
from django.core.validators import FileExtensionValidator
from django.contrib.auth.models import AbstractUser


def to_string(self):
    return json.dumps(model_to_dict(self), cls=DjangoJSONEncoder)


class CustomUser(AbstractUser):
    first_name = models.CharField(max_length=64, blank=True)
    last_name = models.CharField(max_length=64, blank=True)

    class Meta:
        db_table = 'users'
        verbose_name_plural = 'Users'
        ordering = ['email']


class Id(models.Model):
    """Abstract id generation model. Useful for apis"""

    id = models.UUIDField(primary_key=True,
                          default=uuid.uuid4,
                          editable=False)

    class Meta:
        abstract = True


class Resource(Id):
    """A Resource is an abstract thing with a name for primary key and some description. Base for AI related stuff."""

    name = models.CharField(max_length=255, help_text='Name')
    description = models.CharField(default='', blank=True, max_length=1023, help_text='Description')

    class Meta:
        abstract = True

    def __str__(self):
        return self.name

    def get_vectordb_text(self):
        return f"{self.name} {self.description}"

    def get_vectordb_metadata(self):
        return model_to_dict(self, fields=('tenant',))


class Attribute(Resource):
    """Attributes"""

    type = models.CharField(max_length=32,
                            help_text="The type of the attribute like string, boolean, list(string), and so on.")
    user = models.ForeignKey(CustomUser, on_delete=models.DO_NOTHING)

    class Meta:
        db_table = 'attributes'
        verbose_name_plural = 'Attributes'
        ordering = ['name']


class AttributeValue(Resource):
    """The values for the attributes"""

    attribute = models.ForeignKey(Attribute, on_delete=models.DO_NOTHING, null=True)
    user = models.ForeignKey(CustomUser, on_delete=models.DO_NOTHING)

    class Meta:
        db_table = 'attribute_values'
        verbose_name_plural = 'Attribute Values'
        ordering = ['name']

    def get_vectordb_metadata(self):
        if self.attribute:
            return {
                'name': self.name,
                'description': self.description,
                'user': self.user.id if self.user else None,
                'attribute': {
                    'name': self.attribute.name,
                    'type': self.attribute.type,
                }
            }
        else:
            return {
                'name': self.name,
                'description': self.description,
                'user': self.user.id if self.user else None,
                'attribute': None
            }


class Memory(models.Model):
    input = models.CharField(max_length=4096, help_text="The input given to the llm.")
    output = models.CharField(max_length=2048, help_text="The output generated by the llm.")
    user = models.ForeignKey(CustomUser, on_delete=models.DO_NOTHING)
    field_of_activity = models.CharField(max_length=64, help_text="The field of activity for the mapping.")

    def get_vectordb_text(self):
        return f"{self.input}, {self.output}"

    def get_vectordb_metadata(self):
        return {"user": self.user.id if self.user else None, "field_of_activity": self.field_of_activity,
                "memory": {"input": self.input, "output": self.output}}

    class Meta:
        db_table = 'memories'
        verbose_name_plural = 'Memories'
        ordering = ['user']


class MappingTemplate(Resource):
    field_of_activity = models.CharField(max_length=64, help_text="The field of activity for the mapping.")
    attributes = models.ManyToManyField(Attribute, related_name="templates")
    user = models.ForeignKey(CustomUser, on_delete=models.DO_NOTHING)

    class Meta:
        db_table = 'mapping_templates'
        verbose_name_plural = 'Mapping Templates'
        ordering = ['name']


class MappingSetup(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.DO_NOTHING)
    field_of_activity = models.CharField(max_length=64, help_text="The field of activity for the mapping.")
    attributes = models.ManyToManyField(Attribute, related_name="setups")
    number_of_attribute_values = models.IntegerField(
        help_text="The number of attribute values retrieved for each attribute.")
    mapping_template = models.ForeignKey(MappingTemplate, on_delete=models.DO_NOTHING, null=True, blank=True)
    use_descriptions = models.BooleanField(default=False)
    number_of_memory_values = models.IntegerField(help_text="The number of memory values retrieved for each attribute.")
    use_check_prompt = models.BooleanField(default=False)

    class Meta:
        db_table = 'mapping_setups'
        verbose_name_plural = 'Mapping Setups'
        ordering = ['user']


class DbSetup(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.DO_NOTHING)
    use_attribute_values = models.BooleanField(default=False)
    use_memory = models.BooleanField(default=False)
    attribute_file = models.FileField(upload_to='uploaded_attributes/', validators=[FileExtensionValidator(allowed_extensions=["json"])])
    attribute_values_file = models.FileField(upload_to='sample/uploaded_attribute_values/', validators=[FileExtensionValidator(allowed_extensions=["json"])],  null=True, blank=True)
    memory_file = models.FileField(upload_to='sample/uploaded_memories/', validators=[FileExtensionValidator(allowed_extensions=["json"])],  null=True, blank=True)
    field_of_activity = models.CharField(max_length=64, help_text="The field of activity for the mapping.", null=True, blank=True)

    class Meta:
        db_table = 'db_setups'
        verbose_name_plural = 'Database Setups'
        ordering = ['user']
